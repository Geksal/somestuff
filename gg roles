# Provider Block
provider "aws" {
  profile = "default"
  region  = "us-east-1"
}

##############################
# Create CloudWatch Log Group for Flow Logs
resource "aws_cloudwatch_log_group" "flow_logs" {
  name = "vpc-flow-logs-group"
}

##############################
# Create an IAM Role for CloudWatch to Firehose
resource "aws_iam_role" "iam_for_cloudwatch_to_firehose" {
  name               = "iam-for-cloudwatch-to-firehose-role"
  assume_role_policy = data.aws_iam_policy_document.assume_cloudwatch_role.json
}

data "aws_iam_policy_document" "assume_cloudwatch_role" {
  statement {
    effect  = "Allow"
    actions = ["sts:AssumeRole"]
    principals {
      type        = "Service"
      identifiers = ["logs.amazonaws.com"]
    }
  }
}

resource "aws_iam_policy" "cloudwatch_to_firehose_policy" {
  name   = "CloudWatchToFirehosePolicy"
  policy = data.aws_iam_policy_document.cloudwatch_to_firehose.json
}

data "aws_iam_policy_document" "cloudwatch_to_firehose" {
  statement {
    effect = "Allow"
    actions = [
      "logs:PutSubscriptionFilter",
      "firehose:PutRecord",
      "firehose:PutRecordBatch"
    ]
    resources = [aws_kinesis_firehose_delivery_stream.firehose.arn]
  }
}

resource "aws_iam_role_policy_attachment" "attach_cw_to_firehose" {
  role       = aws_iam_role.iam_for_cloudwatch_to_firehose.name
  policy_arn = aws_iam_policy.cloudwatch_to_firehose_policy.arn
}

##############################
# CloudWatch Log Subscription Filter for Firehose
resource "aws_cloudwatch_log_subscription_filter" "cw_to_elasticsearch_filter" {
  name            = "cw-to-elasticsearch-filter"
  role_arn        = aws_iam_role.iam_for_cloudwatch_to_firehose.arn
  log_group_name  = aws_cloudwatch_log_group.flow_logs.name  # The log group to stream
  filter_pattern  = "logtype test"  # Replace with the actual pattern if needed
  destination_arn = aws_kinesis_firehose_delivery_stream.firehose.arn  # Firehose delivery stream ARN
  distribution    = "Random"
}

##############################
# Create Kinesis Firehose Delivery Stream (for Elasticsearch)
resource "aws_kinesis_firehose_delivery_stream" "firehose" {
  name        = "kinesis-firehose-elasticsearch-stream"
  destination = "elasticsearch"

  elasticsearch_configuration {
    domain_arn = aws_elasticsearch_domain.test_cluster.arn
    role_arn   = aws_iam_role.firehose_role.arn
    index_name = "vpc-flow-logs"
    type_name  = "flow-log"

    s3_configuration {
      role_arn           = aws_iam_role.firehose_role.arn
      bucket_arn         = aws_s3_bucket.bucket.arn
      buffering_size     = 10
      buffering_interval = 300
      compression_format = "GZIP"
    }
  }
}

##############################
# Create Elasticsearch Domain for Storing Logs
resource "aws_elasticsearch_domain" "test_cluster" {
  domain_name           = "firehose-es-test"
  elasticsearch_version = "7.10"

  cluster_config {
    instance_type  = "t3.small.elasticsearch"
    instance_count = 2
  }

  ebs_options {
    ebs_enabled = true
    volume_size = 10 # GB
  }
}

##############################
# Create S3 Bucket for Firehose Backup (optional)
resource "aws_s3_bucket" "bucket" {
  bucket = "my-vpc-flow-logs-bucket"
  acl    = "private"  # Private to restrict access
}

##############################
# IAM Role for Kinesis Firehose
resource "aws_iam_role" "firehose_role" {
  name               = "firehose-role"
  assume_role_policy = data.aws_iam_policy_document.firehose_assume_role.json
}

data "aws_iam_policy_document" "firehose_assume_role" {
  statement {
    effect  = "Allow"
    actions = ["sts:AssumeRole"]
    principals {
      type        = "Service"
      identifiers = ["firehose.amazonaws.com"]
    }
  }
}

resource "aws_iam_policy" "firehose_policy" {
  name   = "FirehoseDeliveryPolicy"
  policy = data.aws_iam_policy_document.firehose_permissions.json
}

data "aws_iam_policy_document" "firehose_permissions" {
  statement {
    effect = "Allow"
    actions = [
      "es:DescribeElasticsearchDomain",
      "es:DescribeElasticsearchDomains",
      "es:DescribeElasticsearchDomainConfig",
      "es:ESHttpPut",
      "es:ESHttpPost"
    ]
    resources = ["${aws_elasticsearch_domain.test_cluster.arn}/*"]
  }

  statement {
    effect = "Allow"
    actions = [
      "s3:PutObject",
      "s3:GetBucketLocation",
      "s3:ListBucket"
    ]
    resources = [
      aws_s3_bucket.bucket.arn,
      "${aws_s3_bucket.bucket.arn}/*"
    ]
  }

  statement {
    effect = "Allow"
    actions = [
      "logs:PutLogEvents"
    ]
    resources = [aws_cloudwatch_log_group.flow_logs.arn]
  }
}

resource "aws_iam_role_policy_attachment" "attach_firehose" {
  role       = aws_iam_role.firehose_role.name
  policy_arn = aws_iam_policy.firehose_policy.arn
}

##############################
# Create IAM Role for Elasticsearch
resource "aws_iam_role" "elasticsearch_role" {
  name               = "elasticsearch-role"
  assume_role_policy = data.aws_iam_policy_document.assume_elasticsearch_role.json
}

data "aws_iam_policy_document" "assume_elasticsearch_role" {
  statement {
    effect  = "Allow"
    actions = ["sts:AssumeRole"]
    principals {
      type        = "Service"
      identifiers = ["es.amazonaws.com"]
    }
  }
}

resource "aws_iam_policy" "elasticsearch_policy" {
  name   = "ElasticsearchAccessPolicy"
  policy = data.aws_iam_policy_document.elasticsearch_permissions.json
}

data "aws_iam_policy_document" "elasticsearch_permissions" {
  statement {
    effect = "Allow"
    actions = [
      "es:ESHttpGet",
      "es:ESHttpPut",
      "es:ESHttpPost"
    ]
    resources = ["${aws_elasticsearch_domain.test_cluster.arn}/*"]
  }
}

resource "aws_iam_role_policy_attachment" "attach_es_policy" {
  role       = aws_iam_role.elasticsearch_role.name
  policy_arn = aws_iam_policy.elasticsearch_policy.arn
}
